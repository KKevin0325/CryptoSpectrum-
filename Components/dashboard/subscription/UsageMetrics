import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { FileText, Activity, Database, Zap } from "lucide-react";

export default function UsageMetrics({ subscription, plan }) {
  if (!subscription || !plan) return null;

  const usage = subscription.usage_stats || {};
  const limits = plan.limits || {};

  const metrics = [
    {
      name: "Reports Generated",
      current: usage.reports_generated_this_month || 0,
      limit: limits.reports_per_month || 0,
      icon: FileText,
      color: "blue"
    },
    {
      name: "Assets Tracked", 
      current: usage.assets_tracked || 0,
      limit: limits.assets_tracked || 0,
      icon: Activity,
      color: "green"
    },
    {
      name: "API Calls Today",
      current: usage.api_calls_today || 0,
      limit: limits.api_calls_per_day || 0,
      icon: Zap,
      color: "purple"
    }
  ];

  return (
    <Card className="bg-white/80 backdrop-blur-sm border-slate-200/60">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Database className="w-5 h-5 text-blue-500" />
          Usage This Period
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {metrics.map((metric) => {
          const percentage = metric.limit > 0 ? (metric.current / metric.limit) * 100 : 0;
          const isNearLimit = percentage > 80;
          const isOverLimit = percentage > 100;
          
          return (
            <div key={metric.name} className="space-y-2">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <metric.icon className={`w-4 h-4 text-${metric.color}-500`} />
                  <span className="font-medium text-sm">{metric.name}</span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-sm font-medium">
                    {metric.current.toLocaleString()} / {metric.limit.toLocaleString()}
                  </span>
                  {isOverLimit && (
                    <Badge className="bg-red-100 text-red-700 text-xs">Over Limit</Badge>
                  )}
                  {isNearLimit && !isOverLimit && (
                    <Badge className="bg-yellow-100 text-yellow-700 text-xs">Near Limit</Badge>
                  )}
                </div>
              </div>
              
              <Progress 
                value={Math.min(percentage, 100)} 
                className={`h-2 ${
                  isOverLimit ? 'bg-red-100' : 
                  isNearLimit ? 'bg-yellow-100' : 
                  'bg-slate-200'
                }`}
              />
              
              <div className="text-xs text-slate-500">
                {percentage.toFixed(1)}% of monthly limit used
              </div>
            </div>
          );
        })}
        
        <div className="pt-4 border-t border-slate-200">
          <div className="text-sm text-slate-600">
            Usage resets on your next billing cycle
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
