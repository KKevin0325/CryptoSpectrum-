import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { 
  CreditCard, 
  Crown, 
  Shield, 
  Zap,
  Calendar,
  AlertTriangle,
  CheckCircle,
  ArrowLeft,
  RefreshCw,
  Smartphone
} from "lucide-react";
import { format } from "date-fns";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";

import PricingCard from "../components/subscription/PricingCard";
import UsageMetrics from "../components/subscription/UsageMetrics";
import BillingHistory from "../components/subscription/BillingHistory";
import TrialBanner from "../components/subscription/TrialBanner";
import LoadingState from "../components/subscription/LoadingState";
import SubscriptionError from "../components/subscription/SubscriptionError";
import ErrorBoundary from "../components/subscription/ErrorBoundary";
import IOSPaymentHandler from "../components/subscription/IOSPaymentHandler";
import { SubscriptionProvider, useSubscription } from "../components/subscription/SubscriptionProvider";
import { IOSUtils } from "../components/subscription/IOSPaymentHandler";

function SubscriptionContent() {
  const {
    user,
    plans,
    currentSubscription,
    isLoading,
    isProcessing,
    error,
    purchaseSubscription,
    restoreSubscription,
    cancelSubscription,
    refreshSubscription,
    clearError
  } = useSubscription();

  const [billingCycle, setBillingCycle] = useState("monthly");
  const [showCancelConfirm, setShowCancelConfirm] = useState(false);

  const currentPlan = plans.find(p => p.name === currentSubscription?.plan_name);
  const isTrialActive = currentSubscription?.status === "trial";
  const isIOSApp = IOSUtils.isIOSApp();

  // Handle plan selection with iOS optimization
  const handlePlanSelection = async (plan, cycle) => {
    if (isIOSApp) {
      // Use iOS native purchase flow
      const productId = IOSUtils.getIOSProductId(plan, cycle);
      if (productId) {
        IOSUtils.requestPurchase(productId, plan.name, cycle);
        return;
      }
    }
    
    // Fallback to web purchase flow
    await purchaseSubscription(plan, cycle);
  };

  // Handle restore with iOS optimization
  const handleRestoreSubscription = async () => {
    if (isIOSApp) {
      IOSUtils.requestRestore();
      return;
    }
    
    await restoreSubscription();
  };

  // Handle cancel with iOS optimization
  const handleCancelSubscription = async () => {
    if (isIOSApp) {
      // On iOS, redirect to App Store subscription management
      IOSUtils.cancelSubscription();
      return;
    }
    
    await cancelSubscription();
    setShowCancelConfirm(false);
  };

  const handleUpgradeFromTrial = () => {
    const proTab = document.querySelector('[data-state="active"]');
    if (proTab) {
      proTab.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  };

  if (isLoading) {
    return <LoadingState />;
  }

  if (error) {
    return (
      <div className="p-6 lg:p-8 bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 min-h-screen">
        <SubscriptionError 
          error={error}
          onRetry={refreshSubscription}
          onClearError={clearError}
        />
      </div>
    );
  }

  return (
    <div className="p-4 lg:p-8 space-y-6 lg:space-y-8 bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 min-h-screen">
      {/* Mobile-optimized Header */}
      <div className="flex items-center gap-4 mb-6">
        <Link to={createPageUrl("Dashboard")}>
          <Button variant="outline" size="icon" className="bg-white/80 backdrop-blur-sm">
            <ArrowLeft className="w-4 h-4" />
          </Button>
        </Link>
        <div className="flex-1">
          <h1 className="text-xl lg:text-3xl font-bold text-slate-900">
            Subscription & Billing
          </h1>
          <p className="text-sm lg:text-base text-slate-600">
            {isIOSApp ? 'Manage your iOS subscription' : 'Manage your Web3Intel subscription'}
          </p>
        </div>
        {isIOSApp && (
          <Badge className="bg-blue-100 text-blue-700 hidden sm:flex">
            <Smartphone className="w-3 h-3 mr-1" />
            iOS App
          </Badge>
        )}
      </div>

      {/* Trial Banner */}
      {isTrialActive && (
        <TrialBanner 
          subscription={currentSubscription}
          onUpgrade={handleUpgradeFromTrial}
        />
      )}

      <Tabs defaultValue="plans" className="space-y-6 lg:space-y-8">
        <TabsList className="grid w-full grid-cols-3 max-w-md mx-auto bg-white/80 backdrop-blur-sm">
          <TabsTrigger value="plans" className="text-sm">Plans</TabsTrigger>
          <TabsTrigger value="usage" className="text-sm">Usage</TabsTrigger>
          <TabsTrigger value="billing" className="text-sm">Billing</TabsTrigger>
        </TabsList>

        <TabsContent value="plans" className="space-y-6 lg:space-y-8">
          {/* Billing Toggle */}
          <div className="flex items-center justify-center gap-4">
            <span className={`font-medium text-sm lg:text-base ${billingCycle === 'monthly' ? 'text-slate-900' : 'text-slate-500'}`}>
              Monthly
            </span>
            <Switch
              checked={billingCycle === "yearly"}
              onCheckedChange={(checked) => setBillingCycle(checked ? "yearly" : "monthly")}
            />
            <span className={`font-medium text-sm lg:text-base ${billingCycle === 'yearly' ? 'text-slate-900' : 'text-slate-500'}`}>
              Yearly
            </span>
            {billingCycle === "yearly" && (
              <Badge className="bg-green-100 text-green-700 ml-2 text-xs">
                Save up to 20%
              </Badge>
            )}
          </div>

          {/* iOS Payment Notice */}
          {isIOSApp && (
            <Alert className="max-w-2xl mx-auto bg-blue-50 border-blue-200">
              <Smartphone className="h-4 w-4 text-blue-600" />
              <AlertDescription className="text-blue-700">
                Payments are processed securely through the Apple App Store. Your subscription will be charged to your Apple ID account.
              </AlertDescription>
            </Alert>
          )}

          {/* Pricing Cards - Mobile Optimized */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 lg:gap-8 max-w-6xl mx-auto">
            {plans.map((plan) => (
              <PricingCard
                key={plan.id}
                plan={plan}
                billingCycle={billingCycle}
                currentPlan={currentSubscription?.plan_name}
                onSelectPlan={handlePlanSelection}
                isLoading={isLoading}
                isProcessing={isProcessing}
              />
            ))}
          </div>

          {/* iOS Restore Button */}
          <div className="text-center">
            <Button 
              variant="ghost" 
              onClick={handleRestoreSubscription}
              disabled={isProcessing}
              className="text-blue-600 hover:text-blue-700"
            >
              <RefreshCw className="w-4 h-4 mr-2" />
              Restore Purchases
            </Button>
            <p className="text-xs text-slate-500 mt-2">
              Already purchased? Restore your subscription here
            </p>
          </div>

          {/* Current Plan Status */}
          {currentSubscription && (
            <Card className="max-w-2xl mx-auto bg-white/80 backdrop-blur-sm border-slate-200/60">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-lg">
                  <CheckCircle className="w-5 h-5 text-green-500" />
                  Current Subscription
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <div className="text-sm text-slate-500">Plan</div>
                    <div className="font-semibold">{currentSubscription.plan_name}</div>
                  </div>
                  <div>
                    <div className="text-sm text-slate-500">Status</div>
                    <Badge className={
                      currentSubscription.status === 'active' ? 'bg-green-100 text-green-700' :
                      currentSubscription.status === 'trial' ? 'bg-blue-100 text-blue-700' :
                      'bg-red-100 text-red-700'
                    }>
                      {currentSubscription.status}
                    </Badge>
                  </div>
                  <div>
                    <div className="text-sm text-slate-500">Billing Cycle</div>
                    <div className="font-semibold capitalize">{currentSubscription.billing_cycle}</div>
                  </div>
                  <div>
                    <div className="text-sm text-slate-500">Next Billing</div>
