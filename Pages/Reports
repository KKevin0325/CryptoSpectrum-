
import React, { useState, useEffect } from "react";
import { Web3Report } from "@/entities/Web3Report";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Search, 
  Filter, 
  Download, 
  FileText, 
  Shield, 
  DollarSign, 
  Activity,
  Calendar,
  TrendingUp,
  AlertTriangle
} from "lucide-react";
import { format } from "date-fns";

export default function Reports() {
  const [reports, setReports] = useState([]);
  const [filteredReports, setFilteredReports] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [activeTab, setActiveTab] = useState("all");
  const [selectedReport, setSelectedReport] = useState(null);

  useEffect(() => {
    loadReports();
  }, []);

  useEffect(() => {
    let filtered = reports;

    if (activeTab !== "all") {
      filtered = filtered.filter(report => report.category === activeTab);
    }

    if (searchTerm) {
      filtered = filtered.filter(report => 
        report.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        report.summary?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    setFilteredReports(filtered);
  }, [reports, searchTerm, activeTab]); // Dependencies: reports, searchTerm, activeTab

  const loadReports = async () => {
    const data = await Web3Report.list("-created_date", 50);
    setReports(data);
  };

  const getCategoryIcon = (category) => {
    switch (category) {
      case 'compliance': return Shield;
      case 'finance': return DollarSign;
      case 'technical': return Activity;
      default: return FileText;
    }
  };

  const getRiskColor = (riskLevel) => {
    switch (riskLevel) {
      case 'low': return 'bg-green-100 text-green-700 border-green-200';
      case 'medium': return 'bg-yellow-100 text-yellow-700 border-yellow-200';
      case 'high': return 'bg-orange-100 text-orange-700 border-orange-200';
      case 'critical': return 'bg-red-100 text-red-700 border-red-200';
      default: return 'bg-gray-100 text-gray-700 border-gray-200';
    }
  };

  return (
    <div className="p-6 lg:p-8 space-y-8 bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 min-h-screen">
      {/* Header */}
      <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4">
        <div>
          <h1 className="text-3xl lg:text-4xl font-bold text-slate-900 mb-2">
            Intelligence Reports
          </h1>
          <p className="text-slate-600 text-lg">
            Comprehensive analysis and insights from Web3 data
          </p>
        </div>
        
        {/* Search and Filters */}
        <div className="flex gap-3 w-full lg:w-auto">
          <div className="relative flex-1 lg:w-64">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4" />
            <Input
              placeholder="Search reports..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10 bg-white/80 backdrop-blur-sm border-slate-200/60"
            />
          </div>
          <Button variant="outline" className="bg-white/80 backdrop-blur-sm border-slate-200/60">
            <Filter className="w-4 h-4 mr-2" />
            Filter
          </Button>
          <Button variant="outline" className="bg-white/80 backdrop-blur-sm border-slate-200/60">
            <Download className="w-4 h-4 mr-2" />
            Export
          </Button>
        </div>
      </div>

      {/* Content */}
      <div className="grid lg:grid-cols-4 gap-8">
        {/* Reports List */}
        <div className="lg:col-span-3">
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="mb-6 bg-white/80 backdrop-blur-sm">
              <TabsTrigger value="all">All Reports</TabsTrigger>
              <TabsTrigger value="compliance">Compliance</TabsTrigger>
              <TabsTrigger value="finance">Finance</TabsTrigger>
              <TabsTrigger value="technical">Technical</TabsTrigger>
            </TabsList>

            <TabsContent value={activeTab}>
              <div className="space-y-4">
                {filteredReports.length > 0 ? (
                  filteredReports.map((report) => {
                    const CategoryIcon = getCategoryIcon(report.category);
                    return (
                      <Card 
                        key={report.id} 
                        className="bg-white/80 backdrop-blur-sm border-slate-200/60 hover:shadow-lg transition-all duration-300 cursor-pointer"
                        onClick={() => setSelectedReport(report)}
                      >
                        <CardHeader className="pb-4">
                          <div className="flex items-start justify-between">
                            <div className="flex items-start gap-3">
                              <div className={`p-2 rounded-lg ${
                                report.category === 'compliance' ? 'bg-purple-100 text-purple-600' :
                                report.category === 'finance' ? 'bg-green-100 text-green-600' :
                                report.category === 'technical' ? 'bg-blue-100 text-blue-600' :
                                'bg-slate-100 text-slate-600'
                              }`}>
                                <CategoryIcon className="w-5 h-5" />
                              </div>
                              <div className="flex-1">
                                <CardTitle className="text-lg mb-2">{report.title}</CardTitle>
                                <p className="text-slate-600 text-sm line-clamp-2">
                                  {report.summary}
                                </p>
                              </div>
                            </div>
                            <Badge className={getRiskColor(report.risk_level)}>
                              {report.risk_level} risk
                            </Badge>
                          </div>
                        </CardHeader>
                        <CardContent className="pt-0">
                          <div className="flex items-center justify-between text-sm text-slate-500">
                            <div className="flex items-center gap-4">
                              <span className="flex items-center gap-1">
                                <Calendar className="w-4 h-4" />
                                {format(new Date(report.created_date), 'MMM d, yyyy')}
                              </span>
                              <span className="flex items-center gap-1">
                                <Shield className="w-4 h-4" />
                                Score: {report.compliance_score || 'N/A'}/100
                              </span>
                            </div>
                            <Badge variant="secondary" className="text-xs">
                              {report.category}
                            </Badge>
                          </div>
                        </CardContent>
                      </Card>
                    );
                  })
                ) : (
                  <Card className="bg-white/80 backdrop-blur-sm border-slate-200/60">
                    <CardContent className="p-12 text-center">
                      <AlertTriangle className="w-12 h-12 text-slate-400 mx-auto mb-4" />
                      <h3 className="text-lg font-semibold text-slate-700 mb-2">No Reports Found</h3>
                      <p className="text-slate-500 mb-4">
                        {searchTerm ? 'No reports match your search criteria.' : 'No reports have been generated yet.'}
                      </p>
                      <Button onClick={() => window.history.back()}>
                        Go Back to Dashboard
                      </Button>
                    </CardContent>
                  </Card>
                )}
              </div>
            </TabsContent>
          </Tabs>
        </div>

        {/* Report Details Sidebar */}
        <div className="space-y-6">
          {selectedReport ? (
            <Card className="bg-white/80 backdrop-blur-sm border-slate-200/60 sticky top-6">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-lg">
                  <FileText className="w-5 h-5 text-blue-500" />
                  Report Details
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <h4 className="font-semibold text-slate-900 mb-2">{selectedReport.title}</h4>
                  <p className="text-sm text-slate-600">{selectedReport.summary}</p>
                </div>

                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-slate-500">Category</span>
                    <Badge variant="secondary">{selectedReport.category}</Badge>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-slate-500">Risk Level</span>
                    <Badge className={getRiskColor(selectedReport.risk_level)}>
                      {selectedReport.risk_level}
                    </Badge>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-slate-500">Compliance Score</span>
                    <span className="font-medium">{selectedReport.compliance_score || 'N/A'}/100</span>
                  </div>
                </div>

                {selectedReport.key_findings && selectedReport.key_findings.length > 0 && (
                  <div>
                    <h5 className="font-medium text-slate-700 mb-2">Key Findings</h5>
                    <div className="space-y-2">
                      {selectedReport.key_findings.slice(0, 3).map((finding, index) => (
                        <div key={index} className="text-sm text-slate-600 p-2 bg-slate-50 rounded-lg">
                          • {finding}
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                <div className="pt-4 border-t border-slate-200">
                  <Button className="w-full" size="sm">
                    <Download className="w-4 h-4 mr-2" />
                    Download Full Report
                  </Button>
                </div>
              </CardContent>
            </Card>
          ) : (
            <Card className="bg-white/80 backdrop-blur-sm border-slate-200/60">
              <CardContent className="p-8 text-center">
                <FileText className="w-8 h-8 text-slate-400 mx-auto mb-3" />
                <p className="text-slate-500 text-sm">
                  Select a report to view details
                </p>
              </CardContent>
            </Card>
          )}

          {/* Quick Stats */}
          <Card className="bg-gradient-to-br from-blue-50 to-cyan-50 border-blue-200/50">
            <CardHeader>
              <CardTitle className="text-lg">Report Statistics</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="flex justify-between items-center">
                <span className="text-sm text-slate-600">Total Reports</span>
                <span className="font-bold text-slate-900">{reports.length}</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm text-slate-600">This Week</span>
                <span className="font-bold text-green-600">+12</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm text-slate-600">Avg Risk Score</span>
                <span className="font-bold text-slate-900">
                  {reports.length > 0 
                    ? (reports.reduce((sum, r) => sum + (r.compliance_score || 0), 0) / reports.length).toFixed(0)
                    : 0}/100
                </span>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}

